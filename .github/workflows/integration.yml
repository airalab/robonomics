name: Integration
on: [push, pull_request]
jobs:
  native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - name: Install LLVM (windows only)
      if: runner.os == 'Windows'
      run: choco install llvm
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: 'nightly-2020-02-02'
        targets: 'wasm32-unknown-unknown'
    - name: Checkout the source code
      uses: actions/checkout@master
    - name: Check targets are installed correctly
      run: rustup target list --installed
    - name: Install build tools
      run: cargo install --git https://github.com/alexcrichton/wasm-gc --force
    - name: Install libudev dependecy
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update && sudo apt install libudev-dev
    - name: Install ROS Melodic
      if: matrix.os == 'ubuntu-latest'
      run: ./ros_installation.sh
    - name: Build optimized binary
      run: cargo build --release --verbose

    - name: Upload binary archive into IPFS
      if: runner.os != 'Windows'
      run: |
        cd target/release
        tar cfJ robonomics-${{ matrix.os }}-x86_64.tar.xz robonomics
        curl "https://ipfs.infura.io:5001/api/v0/add" -F file=@robonomics-${{ matrix.os }}-x86_64.tar.xz
    - uses: actions/upload-artifact@master
      if: runner.os != 'Windows'
      with:
        name: robonomics-${{ matrix.os }}-x86_64.tar.xz
        path: target/release/robonomics-${{ matrix.os }}-x86_64.tar.xz

    - name: Upload binary archive into IPFS (windows only)
      if: runner.os == 'Windows'
      run: |
        cd target/release
        tar czf robonomics-${{ matrix.os }}-x86_64.tar.gz robonomics.exe
        curl "https://ipfs.infura.io:5001/api/v0/add" -F file=@robonomics-${{ matrix.os }}-x86_64.tar.gz
    - uses: actions/upload-artifact@master
      if: runner.os == 'Windows'
      with:
        name: robonomics-${{ matrix.os }}-x86_64.tar.gz
        path: target/release/robonomics-${{ matrix.os }}-x86_64.tar.gz

    - name: Build subkey optimized binary
      run: cargo build --release --verbose -p subkey

    - name: Upload subkey binary archive into IPFS
      if: runner.os != 'Windows'
      run: |
        cd target/release
        tar cfJ subkey-${{ matrix.os }}-x86_64.tar.xz subkey
        curl "https://ipfs.infura.io:5001/api/v0/add" -F file=@subkey-${{ matrix.os }}-x86_64.tar.xz
    - uses: actions/upload-artifact@master
      if: runner.os != 'Windows'
      with:
        name: subkey-${{ matrix.os }}-x86_64.tar.xz
        path: target/release/subkey-${{ matrix.os }}-x86_64.tar.xz

    - name: Upload subkey binary archive into IPFS (windows only)
      if: runner.os == 'Windows'
      run: |
        cd target/release
        tar czf subkey-${{ matrix.os }}-x86_64.tar.gz subkey.exe
        curl "https://ipfs.infura.io:5001/api/v0/add" -F file=@subkey-${{ matrix.os }}-x86_64.tar.gz
    - uses: actions/upload-artifact@master
      if: runner.os == 'Windows'
      with:
        name: subkey-${{ matrix.os }}-x86_64.tar.gz
        path: target/release/subkey-${{ matrix.os }}-x86_64.tar.gz

  wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: 'nightly-2020-02-02'
        targets: 'wasm32-unknown-unknown'
    - name: Checkout the source code
      uses: actions/checkout@master
    - name: Check targets are installed correctly
      run: rustup target list --installed
    - name: Install build tools
      run: |
        cargo install --git https://github.com/alexcrichton/wasm-gc --force
        cargo install --git https://github.com/rustwasm/wasm-bindgen wasm-bindgen-cli --force
    - name: Build Web Node
      run: make pkg --directory bin/node/cli/browser
    - name: Upload Web Node into IPFS
      run: |
        cd bin/node/cli/browser
        FILES=$(find * -type f | grep -v ' ' | awk -v q="'" '{print " -F " q "file=@\"" $0 "\"" q}')
        curl "https://ipfs.infura.io:5001/api/v0/add?wrap-with-directory=true" $FILES
        echo "Done"

  nix:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: cachix/install-nix-action@v7
    - run: nix-shell --option sandbox false --run "cargo build --release"
