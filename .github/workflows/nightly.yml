name: Nightly builds 
on:
  push:
    branches:
    - master

jobs:
  binary:
    name: Binary (${{ matrix.target }})
    runs-on: ${{ contains(matrix.target, 'windows') && 'windows-latest' || 'ubuntu-18.04' }}
    strategy:
      matrix:
        target:
        - x86_64-pc-windows-msvc
        - x86_64-unknown-linux-gnu
        - aarch64-unknown-linux-gnu
        - armv7-unknown-linux-gnueabihf

    env:
      EXE_EXT: ${{ contains(matrix.target, 'windows') && '.exe' || '' }}

    steps:
    - name: Checkout the source code
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install LLVM (for windows)
      if: contains(matrix.target, 'windows')
      run: choco install llvm

    - name: Install ARM64 multilib
      if: contains(matrix.target, 'aarch64')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib g++-multilib
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        mkdir .cargo
        printf '[target.aarch64-unknown-linux-gnu]\nlinker = "aarch64-linux-gnu-gcc"' > .cargo/config

    - name: Install ARMv7 multilib
      if: contains(matrix.target, 'armv7')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib g++-multilib
        sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        mkdir .cargo
        printf '[target.armv7-unknown-linux-gnu]\nlinker = "arm-linux-gnu-gcc"' > .cargo/config

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly-2021-02-25
        target: ${{ matrix.target }}
        default: true

    - name: Install WASM target (for substrate runtime)
      run: rustup target add wasm32-unknown-unknown --toolchain=nightly-2021-02-25

    - name: Build optimized binary
      uses: actions-rs/cargo@v1
      with:
        use-cross: false
        command: build
        args: --release --locked --target=${{ matrix.target }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@master
      with:
        name: ${{ matrix.target }}
        path: target/release/robonomics${{ env.EXE_EXT }}

  nixos:
    name: NixOS
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the source code
      uses: actions/checkout@v2
      with:
        submodules: true

    - uses: cachix/install-nix-action@v12
      with:
        nix_path: nixpkgs=channel:nixos-20.09

    - name: Build using Nix shell
      run: nix-shell --run "cargo build --release --locked"
