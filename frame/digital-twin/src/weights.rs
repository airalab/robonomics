
//! Autogenerated weights for `robonomics_digital_twin`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-10-06, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `nano`, CPU: `11th Gen Intel(R) Core(TM) i5-1130G7 @ 1.10GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/robonomics
// benchmark
// pallet
// --chain
// dev
// --pallet
// robonomics_digital_twin
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// /home/denis/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `robonomics_digital_twin`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> robonomics_digital_twin::WeightInfo for WeightInfo<T> {
	/// Storage: `DigitalTwin::Total` (r:1 w:1)
	/// Proof: `DigitalTwin::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DigitalTwin::Owner` (r:0 w:1)
	/// Proof: `DigitalTwin::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `1588`
		// Minimum execution time: 20_339_000 picoseconds.
		Weight::from_parts(21_541_000, 0)
			.saturating_add(Weight::from_parts(0, 1588))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `DigitalTwin::Owner` (r:1 w:0)
	/// Proof: `DigitalTwin::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DigitalTwin::DigitalTwin` (r:1 w:1)
	/// Proof: `DigitalTwin::DigitalTwin` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_source() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234`
		//  Estimated: `3699`
		// Minimum execution time: 19_339_000 picoseconds.
		Weight::from_parts(19_984_000, 0)
			.saturating_add(Weight::from_parts(0, 3699))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `DigitalTwin::Owner` (r:1 w:0)
	/// Proof: `DigitalTwin::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DigitalTwin::DigitalTwin` (r:1 w:1)
	/// Proof: `DigitalTwin::DigitalTwin` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_source() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `3631`
		// Minimum execution time: 18_591_000 picoseconds.
		Weight::from_parts(19_151_000, 0)
			.saturating_add(Weight::from_parts(0, 3631))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
